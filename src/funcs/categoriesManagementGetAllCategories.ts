/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { OneRosterCore } from "../core.js";
import { dlv } from "../lib/dlv.js";
import { encodeFormQuery } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { OneRosterError } from "../models/errors/onerostererror.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";
import {
  createPageIterator,
  haltIterator,
  PageIterator,
  Paginator,
} from "../types/operations.js";

/**
 * Get all Categories
 *
 * @remarks
 * Get all of the Line Item Categories on the service provider.
 */
export function categoriesManagementGetAllCategories(
  client: OneRosterCore,
  request: operations.GetAllCategoriesRequest,
  options?: RequestOptions,
): APIPromise<
  PageIterator<
    Result<
      operations.GetAllCategoriesResponse,
      | errors.BadRequestResponseError
      | errors.UnauthorizedRequestResponseError
      | errors.ForbiddenResponseError
      | errors.NotFoundResponseError
      | errors.UnprocessableEntityResponseError
      | errors.TooManyRequestsResponseError
      | errors.InternalServerErrorResponse
      | OneRosterError
      | ResponseValidationError
      | ConnectionError
      | RequestAbortedError
      | RequestTimeoutError
      | InvalidRequestError
      | UnexpectedClientError
      | SDKValidationError
    >,
    { offset: number }
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: OneRosterCore,
  request: operations.GetAllCategoriesRequest,
  options?: RequestOptions,
): Promise<
  [
    PageIterator<
      Result<
        operations.GetAllCategoriesResponse,
        | errors.BadRequestResponseError
        | errors.UnauthorizedRequestResponseError
        | errors.ForbiddenResponseError
        | errors.NotFoundResponseError
        | errors.UnprocessableEntityResponseError
        | errors.TooManyRequestsResponseError
        | errors.InternalServerErrorResponse
        | OneRosterError
        | ResponseValidationError
        | ConnectionError
        | RequestAbortedError
        | RequestTimeoutError
        | InvalidRequestError
        | UnexpectedClientError
        | SDKValidationError
      >,
      { offset: number }
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) => operations.GetAllCategoriesRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [haltIterator(parsed), { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = null;

  const path = pathToFunc("/ims/oneroster/gradebook/v1p2/categories/")();

  const query = encodeFormQuery({
    "fields": payload.fields,
    "filter": payload.filter,
    "limit": payload.limit,
    "offset": payload.offset,
    "orderBy": payload.orderBy,
    "search": payload.search,
    "sort": payload.sort,
  });

  const headers = new Headers(compactMap({
    Accept: "application/json",
  }));

  const secConfig = await extractSecurity(client._options.oAuth2);
  const securityInput = secConfig == null ? {} : { oAuth2: secConfig };
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    options: client._options,
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "getAllCategories",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.oAuth2,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "GET",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    query: query,
    body: body,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [haltIterator(requestRes), { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "401", "403", "404", "422", "429", "4XX", "500", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [haltIterator(doResult), { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result, raw] = await M.match<
    operations.GetAllCategoriesResponse,
    | errors.BadRequestResponseError
    | errors.UnauthorizedRequestResponseError
    | errors.ForbiddenResponseError
    | errors.NotFoundResponseError
    | errors.UnprocessableEntityResponseError
    | errors.TooManyRequestsResponseError
    | errors.InternalServerErrorResponse
    | OneRosterError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >(
    M.json(200, operations.GetAllCategoriesResponse$inboundSchema, {
      key: "Result",
    }),
    M.jsonErr(400, errors.BadRequestResponseError$inboundSchema),
    M.jsonErr(401, errors.UnauthorizedRequestResponseError$inboundSchema),
    M.jsonErr(403, errors.ForbiddenResponseError$inboundSchema),
    M.jsonErr(404, errors.NotFoundResponseError$inboundSchema),
    M.jsonErr(422, errors.UnprocessableEntityResponseError$inboundSchema),
    M.jsonErr(429, errors.TooManyRequestsResponseError$inboundSchema),
    M.jsonErr(500, errors.InternalServerErrorResponse$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return [haltIterator(result), {
      status: "complete",
      request: req,
      response,
    }];
  }

  const nextFunc = (
    responseData: unknown,
  ): {
    next: Paginator<
      Result<
        operations.GetAllCategoriesResponse,
        | errors.BadRequestResponseError
        | errors.UnauthorizedRequestResponseError
        | errors.ForbiddenResponseError
        | errors.NotFoundResponseError
        | errors.UnprocessableEntityResponseError
        | errors.TooManyRequestsResponseError
        | errors.InternalServerErrorResponse
        | OneRosterError
        | ResponseValidationError
        | ConnectionError
        | RequestAbortedError
        | RequestTimeoutError
        | InvalidRequestError
        | UnexpectedClientError
        | SDKValidationError
      >
    >;
    "~next"?: { offset: number };
  } => {
    const offset = request?.offset ?? 0;

    if (!responseData) {
      return { next: () => null };
    }
    const results = dlv(responseData, "categories");
    if (!Array.isArray(results) || !results.length) {
      return { next: () => null };
    }
    const limit = request?.limit ?? 100;
    if (results.length < limit) {
      return { next: () => null };
    }
    const nextOffset = offset + results.length;

    const nextVal = () =>
      categoriesManagementGetAllCategories(
        client,
        {
          ...request,
          offset: nextOffset,
        },
        options,
      );

    return { next: nextVal, "~next": { offset: nextOffset } };
  };

  const page = { ...result, ...nextFunc(raw) };
  return [{ ...page, ...createPageIterator(page, (v) => !v.ok) }, {
    status: "complete",
    request: req,
    response,
  }];
}
