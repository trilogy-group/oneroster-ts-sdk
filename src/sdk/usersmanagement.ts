/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { classesManagementGetClassesForUser } from "../funcs/classesManagementGetClassesForUser.js";
import { usersManagementCreateUser } from "../funcs/usersManagementCreateUser.js";
import { usersManagementDeleteUser } from "../funcs/usersManagementDeleteUser.js";
import { usersManagementGetAllUsers } from "../funcs/usersManagementGetAllUsers.js";
import { usersManagementGetUser } from "../funcs/usersManagementGetUser.js";
import { usersManagementUpdateUser } from "../funcs/usersManagementUpdateUser.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class UsersManagement extends ClientSDK {
  /**
   * Get all Users
   *
   * @remarks
   * To get all Users on the service provider.
   */
  async getAllUsers(
    request: operations.GetAllUsersRequest,
    options?: RequestOptions,
  ): Promise<PageIterator<operations.GetAllUsersResponse, { offset: number }>> {
    return unwrapResultIterator(usersManagementGetAllUsers(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new User
   *
   * @remarks
   * To create a new User on the service provider. The responding system must return the set of sourcedIds that have been allocated to the newly created user record.
   */
  async createUser(
    request: operations.CreateUserRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateUserResponse> {
    return unwrapAsync(usersManagementCreateUser(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a specific User
   *
   * @remarks
   * To get a specific User on the service provider.
   */
  async getUser(
    request: operations.GetUserRequest,
    options?: RequestOptions,
  ): Promise<operations.GetUserResponse> {
    return unwrapAsync(usersManagementGetUser(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an existing User
   *
   * @remarks
   * To update an existing User on the service provider. The sourcedId for the record to be updated is supplied by the requesting system.
   */
  async updateUser(
    request: operations.UpdateUserRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateUserResponse> {
    return unwrapAsync(usersManagementUpdateUser(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a User
   *
   * @remarks
   * Perform a soft delete on a specific User on the service provider. This operation changes the status of the User to 'tobedeleted'.
   */
  async deleteUser(
    request: operations.DeleteUserRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(usersManagementDeleteUser(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Classes for a User
   *
   * @remarks
   * To get the set of Classes a User is enrolled in.
   */
  async getClassesForUser(
    request: operations.GetClassesForUserRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetClassesForUserResponse, { offset: number }>
  > {
    return unwrapResultIterator(classesManagementGetClassesForUser(
      this,
      request,
      options,
    ));
  }
}
