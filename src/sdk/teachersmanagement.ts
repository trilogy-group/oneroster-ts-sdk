/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { classesManagementAddTeacherToClass } from "../funcs/classesManagementAddTeacherToClass.js";
import { classesManagementGetClassesForTeacher } from "../funcs/classesManagementGetClassesForTeacher.js";
import { classesManagementGetTeachersForClass } from "../funcs/classesManagementGetTeachersForClass.js";
import { schoolsManagementGetTeachersForClassInSchool } from "../funcs/schoolsManagementGetTeachersForClassInSchool.js";
import { schoolsManagementGetTeachersForSchool } from "../funcs/schoolsManagementGetTeachersForSchool.js";
import { teachersManagementGetAllTeachers } from "../funcs/teachersManagementGetAllTeachers.js";
import { teachersManagementGetTeacher } from "../funcs/teachersManagementGetTeacher.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class TeachersManagement extends ClientSDK {
  /**
   * Get teachers for a Class
   *
   * @remarks
   * To get all teachers assigned to a specific Class. If the corresponding record cannot be located, the api will return a 404 error code and message 'Class not found.'
   */
  async getTeachersForClass(
    request: operations.GetTeachersForClassRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetTeachersForClassResponse, { offset: number }>
  > {
    return unwrapResultIterator(classesManagementGetTeachersForClass(
      this,
      request,
      options,
    ));
  }

  /**
   * Add a teacher to a Class
   *
   * @remarks
   * Enrolls a teacher to a specific Class. The responding system must return the set of sourcedIds that have been allocated to the newly created enrollment record.
   */
  async addTeacherToClass(
    request: operations.AddTeacherToClassRequest,
    options?: RequestOptions,
  ): Promise<operations.AddTeacherToClassResponse> {
    return unwrapAsync(classesManagementAddTeacherToClass(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Teachers for a specific Class in a School
   *
   * @remarks
   * To get all Teachers for a Class in a School on the service provider. If the specified school and/or class cannot be identified within the service provider, the api will return a 404 error code and message 'School or class not found.'
   */
  async getTeachersForClassInSchool(
    request: operations.GetTeachersForClassInSchoolRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.GetTeachersForClassInSchoolResponse,
      { offset: number }
    >
  > {
    return unwrapResultIterator(schoolsManagementGetTeachersForClassInSchool(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all teachers for a school
   *
   * @remarks
   * To get all Teachers for a School on the service provider. If the specified school cannot be identified within the service provider, the api will return a 404 error code and message 'School not found.'
   */
  async getTeachersForSchool(
    request: operations.GetTeachersForSchoolRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetTeachersForSchoolResponse, { offset: number }>
  > {
    return unwrapResultIterator(schoolsManagementGetTeachersForSchool(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all Teachers
   *
   * @remarks
   * To get all Teachers on the service provider.
   */
  async getAllTeachers(
    request: operations.GetAllTeachersRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetAllTeachersResponse, { offset: number }>
  > {
    return unwrapResultIterator(teachersManagementGetAllTeachers(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a specific Teacher
   *
   * @remarks
   * To get a specific Teacher on the service provider. If the corresponding record cannot be located, the api will return a 404 error code and message 'Teacher not found.'
   */
  async getTeacher(
    request: operations.GetTeacherRequest,
    options?: RequestOptions,
  ): Promise<operations.GetTeacherResponse> {
    return unwrapAsync(teachersManagementGetTeacher(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Classes for a Teacher
   *
   * @remarks
   * To get the set of Classes a Teacher is enrolled in. If the specified teacher cannot be identified within the service provider, the api will return a 404 error code and message 'Teacher not found.'
   */
  async getClassesForTeacher(
    request: operations.GetClassesForTeacherRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetClassesForTeacherResponse, { offset: number }>
  > {
    return unwrapResultIterator(classesManagementGetClassesForTeacher(
      this,
      request,
      options,
    ));
  }
}
