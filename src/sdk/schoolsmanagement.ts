/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { schoolsManagementCreateLineItemsForSchool } from "../funcs/schoolsManagementCreateLineItemsForSchool.js";
import { schoolsManagementCreateSchool } from "../funcs/schoolsManagementCreateSchool.js";
import { schoolsManagementDeleteSchool } from "../funcs/schoolsManagementDeleteSchool.js";
import { schoolsManagementGetAllSchools } from "../funcs/schoolsManagementGetAllSchools.js";
import { schoolsManagementGetClassesForSchool } from "../funcs/schoolsManagementGetClassesForSchool.js";
import { schoolsManagementGetCoursesForSchool } from "../funcs/schoolsManagementGetCoursesForSchool.js";
import { schoolsManagementGetEnrollmentsForClassInSchool } from "../funcs/schoolsManagementGetEnrollmentsForClassInSchool.js";
import { schoolsManagementGetEnrollmentsForSchool } from "../funcs/schoolsManagementGetEnrollmentsForSchool.js";
import { schoolsManagementGetLineItemsForSchool } from "../funcs/schoolsManagementGetLineItemsForSchool.js";
import { schoolsManagementGetSchool } from "../funcs/schoolsManagementGetSchool.js";
import { schoolsManagementGetStudentsForClassInSchool } from "../funcs/schoolsManagementGetStudentsForClassInSchool.js";
import { schoolsManagementGetStudentsForSchool } from "../funcs/schoolsManagementGetStudentsForSchool.js";
import { schoolsManagementGetTeachersForClassInSchool } from "../funcs/schoolsManagementGetTeachersForClassInSchool.js";
import { schoolsManagementGetTeachersForSchool } from "../funcs/schoolsManagementGetTeachersForSchool.js";
import { schoolsManagementGetTermsForSchool } from "../funcs/schoolsManagementGetTermsForSchool.js";
import { schoolsManagementUpdateSchool } from "../funcs/schoolsManagementUpdateSchool.js";
import { scoreScalesManagementGetScoreScalesForSchool } from "../funcs/scoreScalesManagementGetScoreScalesForSchool.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class SchoolsManagement extends ClientSDK {
  /**
   * Get Score Scales for a School
   *
   * @remarks
   * Get the set of scoreScales on the service provider for a specific school. If the corresponding record cannot be located, the api will return a 404 error code and message 'School not found.'
   */
  async getScoreScalesForSchool(
    request: operations.GetScoreScalesForSchoolRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetScoreScalesForSchoolResponse, { offset: number }>
  > {
    return unwrapResultIterator(scoreScalesManagementGetScoreScalesForSchool(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all Schools
   *
   * @remarks
   * To get all Schools on the service provider.
   */
  async getAllSchools(
    request: operations.GetAllSchoolsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetAllSchoolsResponse, { offset: number }>
  > {
    return unwrapResultIterator(schoolsManagementGetAllSchools(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new School
   *
   * @remarks
   * To create a new School. The responding system must return the set of sourcedIds that have been allocated to the newly created school record.
   */
  async createSchool(
    request?: operations.CreateSchoolRequest | undefined,
    options?: RequestOptions,
  ): Promise<components.Org> {
    return unwrapAsync(schoolsManagementCreateSchool(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a specific School
   *
   * @remarks
   * Get a specific School on the service provider. If the corresponding record cannot be located, the api will return a 404 error code and message 'School not found.'
   */
  async getSchool(
    request: operations.GetSchoolRequest,
    options?: RequestOptions,
  ): Promise<operations.GetSchoolResponse> {
    return unwrapAsync(schoolsManagementGetSchool(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a School
   *
   * @remarks
   * To update an existing School. The sourcedId for the record to be updated is supplied by the requesting system.
   */
  async updateSchool(
    request: operations.UpdateSchoolRequest,
    options?: RequestOptions,
  ): Promise<components.Org> {
    return unwrapAsync(schoolsManagementUpdateSchool(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a School
   *
   * @remarks
   * Perform a soft delete on a specific School on the service provider. The operation changes the status of the School to 'tobedeleted'.
   */
  async deleteSchool(
    request: operations.DeleteSchoolRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: any }> {
    return unwrapAsync(schoolsManagementDeleteSchool(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Line Items for a School
   *
   * @remarks
   * Get the set of lineItems on the service provider for a specific school. If the corresponding record cannot be located, the api will return a 404 error code and message 'School not found.'
   */
  async getLineItemsForSchool(
    request: operations.GetLineItemsForSchoolRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetLineItemsForSchoolResponse, { offset: number }>
  > {
    return unwrapResultIterator(schoolsManagementGetLineItemsForSchool(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Line Items for a School
   *
   * @remarks
   * To create a set of lineItems for a specific school. The responding system must return the set of sourcedIds that have been allocated to the newly created lineItem records. If the corresponding record cannot be located, the api will return a 404 error code and message 'School not found.'
   */
  async createLineItemsForSchool(
    request: operations.CreateLineItemsForSchoolRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateLineItemsForSchoolResponse> {
    return unwrapAsync(schoolsManagementCreateLineItemsForSchool(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all Classes for a School
   *
   * @remarks
   * To get all Classes for a School on the service provider. If the specified school cannot be identified within the service provider, the api will return a 404 error code and message 'School not found.'
   */
  async getClassesForSchool(
    request: operations.GetClassesForSchoolRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetClassesForSchoolResponse, { offset: number }>
  > {
    return unwrapResultIterator(schoolsManagementGetClassesForSchool(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all Terms for a School
   *
   * @remarks
   * To get all Terms for a School on the service provider. If the specified school cannot be identified within the service provider, the api will return a 404 error code and message 'School not found.'
   */
  async getTermsForSchool(
    request: operations.GetTermsForSchoolRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetTermsForSchoolResponse, { offset: number }>
  > {
    return unwrapResultIterator(schoolsManagementGetTermsForSchool(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Teachers for a specific Class in a School
   *
   * @remarks
   * To get all Teachers for a Class in a School on the service provider. If the specified school and/or class cannot be identified within the service provider, the api will return a 404 error code and message 'School or class not found.'
   */
  async getTeachersForClassInSchool(
    request: operations.GetTeachersForClassInSchoolRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.GetTeachersForClassInSchoolResponse,
      { offset: number }
    >
  > {
    return unwrapResultIterator(schoolsManagementGetTeachersForClassInSchool(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all teachers for a school
   *
   * @remarks
   * To get all Teachers for a School on the service provider. If the specified school cannot be identified within the service provider, the api will return a 404 error code and message 'School not found.'
   */
  async getTeachersForSchool(
    request: operations.GetTeachersForSchoolRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetTeachersForSchoolResponse, { offset: number }>
  > {
    return unwrapResultIterator(schoolsManagementGetTeachersForSchool(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Students for a specific Class in a School
   *
   * @remarks
   * To get all Students for a Class in a School on the service provider. If the specified school and/or class cannot be identified within the service provider, the api will return a 404 error code and message 'School or class not found.'
   */
  async getStudentsForClassInSchool(
    request: operations.GetStudentsForClassInSchoolRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.GetStudentsForClassInSchoolResponse,
      { offset: number }
    >
  > {
    return unwrapResultIterator(schoolsManagementGetStudentsForClassInSchool(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all Students for a School
   *
   * @remarks
   * To get all Students for a School on the service provider.
   */
  async getStudentsForSchool(
    request: operations.GetStudentsForSchoolRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetStudentsForSchoolResponse, { offset: number }>
  > {
    return unwrapResultIterator(schoolsManagementGetStudentsForSchool(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Enrollments for a specific Class in a School
   *
   * @remarks
   * To get all Enrollments for a Class in a School on the service provider. If the specified school and/or class cannot be identified within the service provider, the api will return a 404 error code and message 'School or class not found.'
   */
  async getEnrollmentsForClassInSchool(
    request: operations.GetEnrollmentsForClassInSchoolRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.GetEnrollmentsForClassInSchoolResponse,
      { offset: number }
    >
  > {
    return unwrapResultIterator(schoolsManagementGetEnrollmentsForClassInSchool(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all Enrollments for a School
   *
   * @remarks
   * To get all Enrollments for a School on the service provider. If the specified school cannot be identified within the service provider, the api will return a 404 error code and message 'School not found.'
   */
  async getEnrollmentsForSchool(
    request: operations.GetEnrollmentsForSchoolRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetEnrollmentsForSchoolResponse, { offset: number }>
  > {
    return unwrapResultIterator(schoolsManagementGetEnrollmentsForSchool(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all Courses for a School
   *
   * @remarks
   * To get all Courses for a School on the service provider. If the specified school cannot be identified within the service provider, the api will return a 404 error code and message 'School not found.'
   */
  async getCoursesForSchool(
    request: operations.GetCoursesForSchoolRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetCoursesForSchoolResponse, { offset: number }>
  > {
    return unwrapResultIterator(schoolsManagementGetCoursesForSchool(
      this,
      request,
      options,
    ));
  }
}
