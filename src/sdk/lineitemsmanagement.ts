/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { lineItemsManagementCreateLineItem } from "../funcs/lineItemsManagementCreateLineItem.js";
import { lineItemsManagementCreateResultForLineItem } from "../funcs/lineItemsManagementCreateResultForLineItem.js";
import { lineItemsManagementDeleteLineItem } from "../funcs/lineItemsManagementDeleteLineItem.js";
import { lineItemsManagementGetAllLineItems } from "../funcs/lineItemsManagementGetAllLineItems.js";
import { lineItemsManagementGetLineItem } from "../funcs/lineItemsManagementGetLineItem.js";
import { lineItemsManagementUpdateLineItem } from "../funcs/lineItemsManagementUpdateLineItem.js";
import { schoolsManagementCreateLineItemsForSchool } from "../funcs/schoolsManagementCreateLineItemsForSchool.js";
import { schoolsManagementGetLineItemsForSchool } from "../funcs/schoolsManagementGetLineItemsForSchool.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class LineItemsManagement extends ClientSDK {
  /**
   * Get all Line Items
   *
   * @remarks
   * Get all of the Line Items on the service provider.
   */
  async getAllLineItems(
    request: operations.GetAllLineItemsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetAllLineItemsResponse, { offset: number }>
  > {
    return unwrapResultIterator(lineItemsManagementGetAllLineItems(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a Line Item
   *
   * @remarks
   * To create a new Line Item. The responding system must return the set of sourcedIds that have been allocated to the newly created Line Item records.
   */
  async createLineItem(
    request: operations.CreateLineItemRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateLineItemResponse> {
    return unwrapAsync(lineItemsManagementCreateLineItem(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a Line Item
   *
   * @remarks
   * Get a specific Line Item on the service provider. If the corresponding record cannot be located, the api will return a 404 error code and message 'Line item not found.'
   */
  async getLineItem(
    request: operations.GetLineItemRequest,
    options?: RequestOptions,
  ): Promise<operations.GetLineItemResponse> {
    return unwrapAsync(lineItemsManagementGetLineItem(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Line Item
   *
   * @remarks
   * To update an existing Line Item. The sourcedId for the record to be updated is supplied by the requesting system.
   */
  async updateLineItem(
    request: operations.UpdateLineItemRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(lineItemsManagementUpdateLineItem(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Line Item
   *
   * @remarks
   * Perform a soft delete on a specific Line Item on the service provider. This operation changes the status of the LineItem to 'tobedeleted'.
   */
  async deleteLineItem(
    request: operations.DeleteLineItemRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(lineItemsManagementDeleteLineItem(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a Result for a Line Item
   *
   * @remarks
   * To create a new result for a specific Line Item. The responding system must return the set of sourcedIds that have been allocated to the newly created result records. If the corresponding record cannot be located, the api will return a 404 error code and message 'Line item not found.'
   */
  async createResultForLineItem(
    request: operations.CreateResultForLineItemRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateResultForLineItemResponse> {
    return unwrapAsync(lineItemsManagementCreateResultForLineItem(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Line Items for a School
   *
   * @remarks
   * Get the set of lineItems on the service provider for a specific school. If the corresponding record cannot be located, the api will return a 404 error code and message 'School not found.'
   */
  async getLineItemsForSchool(
    request: operations.GetLineItemsForSchoolRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetLineItemsForSchoolResponse, { offset: number }>
  > {
    return unwrapResultIterator(schoolsManagementGetLineItemsForSchool(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Line Items for a School
   *
   * @remarks
   * To create a set of lineItems for a specific school. The responding system must return the set of sourcedIds that have been allocated to the newly created lineItem records. If the corresponding record cannot be located, the api will return a 404 error code and message 'School not found.'
   */
  async createLineItemsForSchool(
    request: operations.CreateLineItemsForSchoolRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateLineItemsForSchoolResponse> {
    return unwrapAsync(schoolsManagementCreateLineItemsForSchool(
      this,
      request,
      options,
    ));
  }
}
