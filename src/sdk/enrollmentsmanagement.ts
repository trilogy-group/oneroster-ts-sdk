/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { enrollmentsManagementCreateEnrollment } from "../funcs/enrollmentsManagementCreateEnrollment.js";
import { enrollmentsManagementDeleteEnrollment } from "../funcs/enrollmentsManagementDeleteEnrollment.js";
import { enrollmentsManagementGetAllEnrollments } from "../funcs/enrollmentsManagementGetAllEnrollments.js";
import { enrollmentsManagementGetEnrollment } from "../funcs/enrollmentsManagementGetEnrollment.js";
import { enrollmentsManagementUpdateEnrollment } from "../funcs/enrollmentsManagementUpdateEnrollment.js";
import { schoolsManagementGetEnrollmentsForClassInSchool } from "../funcs/schoolsManagementGetEnrollmentsForClassInSchool.js";
import { schoolsManagementGetEnrollmentsForSchool } from "../funcs/schoolsManagementGetEnrollmentsForSchool.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class EnrollmentsManagement extends ClientSDK {
  /**
   * Get all Enrollments
   *
   * @remarks
   * To get all Enrollments on the service provider.
   */
  async getAllEnrollments(
    request: operations.GetAllEnrollmentsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetAllEnrollmentsResponse, { offset: number }>
  > {
    return unwrapResultIterator(enrollmentsManagementGetAllEnrollments(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new Enrollment
   *
   * @remarks
   * To create a new Enrollment. The responding system must return the set of sourcedIds that have been allocated to the newly created enrollment record.
   */
  async createEnrollment(
    request?: operations.CreateEnrollmentRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateEnrollmentResponse> {
    return unwrapAsync(enrollmentsManagementCreateEnrollment(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a specific Enrollment
   *
   * @remarks
   * Get a specific Enrollment on the service provider. If the corresponding record cannot be located, the api will return a 404 error code and message 'Enrollment not found.'
   */
  async getEnrollment(
    request: operations.GetEnrollmentRequest,
    options?: RequestOptions,
  ): Promise<operations.GetEnrollmentResponse> {
    return unwrapAsync(enrollmentsManagementGetEnrollment(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an Enrollment
   *
   * @remarks
   * To update an existing Enrollment. The sourcedId for the record to be updated is supplied by the requesting system.
   */
  async updateEnrollment(
    request: operations.UpdateEnrollmentRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: any }> {
    return unwrapAsync(enrollmentsManagementUpdateEnrollment(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an Enrollment
   *
   * @remarks
   * Perform a soft delete on a specific Enrollment on the service provider. The operation changes the status of the Enrollment to 'tobedeleted'.
   */
  async deleteEnrollment(
    request: operations.DeleteEnrollmentRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(enrollmentsManagementDeleteEnrollment(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Enrollments for a specific Class in a School
   *
   * @remarks
   * To get all Enrollments for a Class in a School on the service provider. If the specified school and/or class cannot be identified within the service provider, the api will return a 404 error code and message 'School or class not found.'
   */
  async getEnrollmentsForClassInSchool(
    request: operations.GetEnrollmentsForClassInSchoolRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.GetEnrollmentsForClassInSchoolResponse,
      { offset: number }
    >
  > {
    return unwrapResultIterator(schoolsManagementGetEnrollmentsForClassInSchool(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all Enrollments for a School
   *
   * @remarks
   * To get all Enrollments for a School on the service provider. If the specified school cannot be identified within the service provider, the api will return a 404 error code and message 'School not found.'
   */
  async getEnrollmentsForSchool(
    request: operations.GetEnrollmentsForSchoolRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetEnrollmentsForSchoolResponse, { offset: number }>
  > {
    return unwrapResultIterator(schoolsManagementGetEnrollmentsForSchool(
      this,
      request,
      options,
    ));
  }
}
