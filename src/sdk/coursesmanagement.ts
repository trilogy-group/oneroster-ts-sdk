/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { coursesManagementCreateComponentResource } from "../funcs/coursesManagementCreateComponentResource.js";
import { coursesManagementCreateCourse } from "../funcs/coursesManagementCreateCourse.js";
import { coursesManagementCreateCourseComponent } from "../funcs/coursesManagementCreateCourseComponent.js";
import { coursesManagementDeleteComponentResource } from "../funcs/coursesManagementDeleteComponentResource.js";
import { coursesManagementDeleteCourse } from "../funcs/coursesManagementDeleteCourse.js";
import { coursesManagementDeleteCourseComponent } from "../funcs/coursesManagementDeleteCourseComponent.js";
import { coursesManagementGetAllComponentResources } from "../funcs/coursesManagementGetAllComponentResources.js";
import { coursesManagementGetAllCourseComponents } from "../funcs/coursesManagementGetAllCourseComponents.js";
import { coursesManagementGetAllCourses } from "../funcs/coursesManagementGetAllCourses.js";
import { coursesManagementGetClassesForCourse } from "../funcs/coursesManagementGetClassesForCourse.js";
import { coursesManagementGetComponentResource } from "../funcs/coursesManagementGetComponentResource.js";
import { coursesManagementGetCourse } from "../funcs/coursesManagementGetCourse.js";
import { coursesManagementGetCourseComponent } from "../funcs/coursesManagementGetCourseComponent.js";
import { coursesManagementPutComponentResource } from "../funcs/coursesManagementPutComponentResource.js";
import { coursesManagementPutCourse } from "../funcs/coursesManagementPutCourse.js";
import { coursesManagementPutCourseComponent } from "../funcs/coursesManagementPutCourseComponent.js";
import { schoolsManagementGetCoursesForSchool } from "../funcs/schoolsManagementGetCoursesForSchool.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class CoursesManagement extends ClientSDK {
  /**
   * Get All Courses
   *
   * @remarks
   * To get all Courses on the service provider.
   */
  async getAllCourses(
    request: operations.GetAllCoursesRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetAllCoursesResponse, { offset: number }>
  > {
    return unwrapResultIterator(coursesManagementGetAllCourses(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a Course
   *
   * @remarks
   * To create a new Course. The responding system must return the set of sourcedIds that have been allocated to the newly created course record.
   */
  async createCourse(
    request?: operations.CreateCourseRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateCourseResponse> {
    return unwrapAsync(coursesManagementCreateCourse(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Classes for a Course
   *
   * @remarks
   * To get all Classes associated with a specific Course. If the corresponding record cannot be located, the api will return a 404 error code and message 'Course not found.'
   */
  async getClassesForCourse(
    request: operations.GetClassesForCourseRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetClassesForCourseResponse, { offset: number }>
  > {
    return unwrapResultIterator(coursesManagementGetClassesForCourse(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a specific Course
   *
   * @remarks
   * Get a specific Course on the service provider. If the corresponding record cannot be located, the api will return a 404 error code and message 'Course not found.'
   */
  async getCourse(
    request: operations.GetCourseRequest,
    options?: RequestOptions,
  ): Promise<operations.GetCourseResponse> {
    return unwrapAsync(coursesManagementGetCourse(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Course
   *
   * @remarks
   * To update an existing Course. The sourcedId for the record to be updated is supplied by the requesting system.
   */
  async putCourse(
    request: operations.PutCourseRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: any }> {
    return unwrapAsync(coursesManagementPutCourse(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Course
   *
   * @remarks
   * Perform a soft delete on a specific Course on the service provider. The operation changes the status of the Course to 'tobedeleted'.
   */
  async deleteCourse(
    request: operations.DeleteCourseRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: any }> {
    return unwrapAsync(coursesManagementDeleteCourse(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Component Resource
   *
   * @remarks
   * To create a new Component Resource. The responding system must return the set of sourcedIds that have been allocated to the newly created componentResource record.
   */
  async createComponentResource(
    request?: operations.CreateComponentResourceRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateComponentResourceResponse> {
    return unwrapAsync(coursesManagementCreateComponentResource(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all Component Resources
   *
   * @remarks
   * To get all Component Resources on the service provider.
   */
  async getAllComponentResources(
    request: operations.GetAllComponentResourcesRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.GetAllComponentResourcesResponse,
      { offset: number }
    >
  > {
    return unwrapResultIterator(coursesManagementGetAllComponentResources(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a specific Component Resource
   *
   * @remarks
   * Get a specific Component Resource on the service provider. If the corresponding record cannot be located, the api will return a 404 error code and message 'Component Resource not found.'
   */
  async getComponentResource(
    request: operations.GetComponentResourceRequest,
    options?: RequestOptions,
  ): Promise<operations.GetComponentResourceResponse> {
    return unwrapAsync(coursesManagementGetComponentResource(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Component Resource
   *
   * @remarks
   * To update an existing Component Resource. The sourcedId for the record to be updated is supplied by the requesting system.
   */
  async putComponentResource(
    request: operations.PutComponentResourceRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: any }> {
    return unwrapAsync(coursesManagementPutComponentResource(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Component Resource
   *
   * @remarks
   * Perform a soft delete on a specific Component Resource on the service provider. The operation changes the status of the Component Resource to 'tobedeleted'.
   */
  async deleteComponentResource(
    request: operations.DeleteComponentResourceRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: any }> {
    return unwrapAsync(coursesManagementDeleteComponentResource(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Course Component
   *
   * @remarks
   * Used when creating a new course component or module
   */
  async createCourseComponent(
    request?: operations.CreateCourseComponentRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateCourseComponentResponse> {
    return unwrapAsync(coursesManagementCreateCourseComponent(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all Course Components
   *
   * @remarks
   * To get all Course Components on the service provider.
   */
  async getAllCourseComponents(
    request: operations.GetAllCourseComponentsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetAllCourseComponentsResponse, { offset: number }>
  > {
    return unwrapResultIterator(coursesManagementGetAllCourseComponents(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a specific Course Component
   *
   * @remarks
   * Get a specific Course Component on the service provider. If the corresponding record cannot be located, the api will return a 404 error code and message 'Course Component not found.'
   */
  async getCourseComponent(
    request: operations.GetCourseComponentRequest,
    options?: RequestOptions,
  ): Promise<operations.GetCourseComponentResponse> {
    return unwrapAsync(coursesManagementGetCourseComponent(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Course Component
   *
   * @remarks
   * To update an existing Course Component. The sourcedId for the record to be updated is supplied by the requesting system.
   */
  async putCourseComponent(
    request: operations.PutCourseComponentRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: any }> {
    return unwrapAsync(coursesManagementPutCourseComponent(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Course Component
   *
   * @remarks
   * Perform a soft delete on a specific Course Component on the service provider. The operation changes the status of the Course Component to 'tobedeleted'.
   */
  async deleteCourseComponent(
    request: operations.DeleteCourseComponentRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: any }> {
    return unwrapAsync(coursesManagementDeleteCourseComponent(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all Courses for a School
   *
   * @remarks
   * To get all Courses for a School on the service provider. If the specified school cannot be identified within the service provider, the api will return a 404 error code and message 'School not found.'
   */
  async getCoursesForSchool(
    request: operations.GetCoursesForSchoolRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetCoursesForSchoolResponse, { offset: number }>
  > {
    return unwrapResultIterator(schoolsManagementGetCoursesForSchool(
      this,
      request,
      options,
    ));
  }
}
