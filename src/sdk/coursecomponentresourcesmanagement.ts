/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { coursesManagementCreateComponentResource } from "../funcs/coursesManagementCreateComponentResource.js";
import { coursesManagementDeleteComponentResource } from "../funcs/coursesManagementDeleteComponentResource.js";
import { coursesManagementGetAllComponentResources } from "../funcs/coursesManagementGetAllComponentResources.js";
import { coursesManagementGetComponentResource } from "../funcs/coursesManagementGetComponentResource.js";
import { coursesManagementPutComponentResource } from "../funcs/coursesManagementPutComponentResource.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class CourseComponentResourcesManagement extends ClientSDK {
  /**
   * Create Component Resource
   *
   * @remarks
   * To create a new Component Resource. The responding system must return the set of sourcedIds that have been allocated to the newly created componentResource record.
   */
  async createComponentResource(
    request?: operations.CreateComponentResourceRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateComponentResourceResponse> {
    return unwrapAsync(coursesManagementCreateComponentResource(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all Component Resources
   *
   * @remarks
   * To get all Component Resources on the service provider.
   */
  async getAllComponentResources(
    request: operations.GetAllComponentResourcesRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.GetAllComponentResourcesResponse,
      { offset: number }
    >
  > {
    return unwrapResultIterator(coursesManagementGetAllComponentResources(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a specific Component Resource
   *
   * @remarks
   * Get a specific Component Resource on the service provider. If the corresponding record cannot be located, the api will return a 404 error code and message 'Component Resource not found.'
   */
  async getComponentResource(
    request: operations.GetComponentResourceRequest,
    options?: RequestOptions,
  ): Promise<operations.GetComponentResourceResponse> {
    return unwrapAsync(coursesManagementGetComponentResource(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Component Resource
   *
   * @remarks
   * To update an existing Component Resource. The sourcedId for the record to be updated is supplied by the requesting system.
   */
  async putComponentResource(
    request: operations.PutComponentResourceRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: any }> {
    return unwrapAsync(coursesManagementPutComponentResource(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Component Resource
   *
   * @remarks
   * Perform a soft delete on a specific Component Resource on the service provider. The operation changes the status of the Component Resource to 'tobedeleted'.
   */
  async deleteComponentResource(
    request: operations.DeleteComponentResourceRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: any }> {
    return unwrapAsync(coursesManagementDeleteComponentResource(
      this,
      request,
      options,
    ));
  }
}
