/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CreateSchoolStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type CreateSchoolStatus = ClosedEnum<typeof CreateSchoolStatus>;

export type CreateSchoolParent = {
  sourcedId: string;
};

export type CreateSchoolOrg = {
  sourcedId?: string | undefined;
  status?: CreateSchoolStatus | undefined;
  metadata?: { [k: string]: any } | undefined;
  name: string;
  type?: "school" | undefined;
  identifier?: string | undefined;
  parent?: CreateSchoolParent | null | undefined;
};

export type CreateSchoolRequest = {
  org: CreateSchoolOrg;
};

/** @internal */
export const CreateSchoolStatus$inboundSchema: z.ZodNativeEnum<
  typeof CreateSchoolStatus
> = z.nativeEnum(CreateSchoolStatus);

/** @internal */
export const CreateSchoolStatus$outboundSchema: z.ZodNativeEnum<
  typeof CreateSchoolStatus
> = CreateSchoolStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSchoolStatus$ {
  /** @deprecated use `CreateSchoolStatus$inboundSchema` instead. */
  export const inboundSchema = CreateSchoolStatus$inboundSchema;
  /** @deprecated use `CreateSchoolStatus$outboundSchema` instead. */
  export const outboundSchema = CreateSchoolStatus$outboundSchema;
}

/** @internal */
export const CreateSchoolParent$inboundSchema: z.ZodType<
  CreateSchoolParent,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type CreateSchoolParent$Outbound = {
  sourcedId: string;
};

/** @internal */
export const CreateSchoolParent$outboundSchema: z.ZodType<
  CreateSchoolParent$Outbound,
  z.ZodTypeDef,
  CreateSchoolParent
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSchoolParent$ {
  /** @deprecated use `CreateSchoolParent$inboundSchema` instead. */
  export const inboundSchema = CreateSchoolParent$inboundSchema;
  /** @deprecated use `CreateSchoolParent$outboundSchema` instead. */
  export const outboundSchema = CreateSchoolParent$outboundSchema;
  /** @deprecated use `CreateSchoolParent$Outbound` instead. */
  export type Outbound = CreateSchoolParent$Outbound;
}

export function createSchoolParentToJSON(
  createSchoolParent: CreateSchoolParent,
): string {
  return JSON.stringify(
    CreateSchoolParent$outboundSchema.parse(createSchoolParent),
  );
}

export function createSchoolParentFromJSON(
  jsonString: string,
): SafeParseResult<CreateSchoolParent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSchoolParent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSchoolParent' from JSON`,
  );
}

/** @internal */
export const CreateSchoolOrg$inboundSchema: z.ZodType<
  CreateSchoolOrg,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string().optional(),
  status: CreateSchoolStatus$inboundSchema.default("active"),
  metadata: z.record(z.any()).optional(),
  name: z.string(),
  type: z.literal("school").default("school").optional(),
  identifier: z.string().optional(),
  parent: z.nullable(z.lazy(() => CreateSchoolParent$inboundSchema)).optional(),
});

/** @internal */
export type CreateSchoolOrg$Outbound = {
  sourcedId?: string | undefined;
  status: string;
  metadata?: { [k: string]: any } | undefined;
  name: string;
  type: "school";
  identifier?: string | undefined;
  parent?: CreateSchoolParent$Outbound | null | undefined;
};

/** @internal */
export const CreateSchoolOrg$outboundSchema: z.ZodType<
  CreateSchoolOrg$Outbound,
  z.ZodTypeDef,
  CreateSchoolOrg
> = z.object({
  sourcedId: z.string().optional(),
  status: CreateSchoolStatus$outboundSchema.default("active"),
  metadata: z.record(z.any()).optional(),
  name: z.string(),
  type: z.literal("school").default("school" as const),
  identifier: z.string().optional(),
  parent: z.nullable(z.lazy(() => CreateSchoolParent$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSchoolOrg$ {
  /** @deprecated use `CreateSchoolOrg$inboundSchema` instead. */
  export const inboundSchema = CreateSchoolOrg$inboundSchema;
  /** @deprecated use `CreateSchoolOrg$outboundSchema` instead. */
  export const outboundSchema = CreateSchoolOrg$outboundSchema;
  /** @deprecated use `CreateSchoolOrg$Outbound` instead. */
  export type Outbound = CreateSchoolOrg$Outbound;
}

export function createSchoolOrgToJSON(
  createSchoolOrg: CreateSchoolOrg,
): string {
  return JSON.stringify(CreateSchoolOrg$outboundSchema.parse(createSchoolOrg));
}

export function createSchoolOrgFromJSON(
  jsonString: string,
): SafeParseResult<CreateSchoolOrg, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSchoolOrg$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSchoolOrg' from JSON`,
  );
}

/** @internal */
export const CreateSchoolRequest$inboundSchema: z.ZodType<
  CreateSchoolRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  org: z.lazy(() => CreateSchoolOrg$inboundSchema),
});

/** @internal */
export type CreateSchoolRequest$Outbound = {
  org: CreateSchoolOrg$Outbound;
};

/** @internal */
export const CreateSchoolRequest$outboundSchema: z.ZodType<
  CreateSchoolRequest$Outbound,
  z.ZodTypeDef,
  CreateSchoolRequest
> = z.object({
  org: z.lazy(() => CreateSchoolOrg$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSchoolRequest$ {
  /** @deprecated use `CreateSchoolRequest$inboundSchema` instead. */
  export const inboundSchema = CreateSchoolRequest$inboundSchema;
  /** @deprecated use `CreateSchoolRequest$outboundSchema` instead. */
  export const outboundSchema = CreateSchoolRequest$outboundSchema;
  /** @deprecated use `CreateSchoolRequest$Outbound` instead. */
  export type Outbound = CreateSchoolRequest$Outbound;
}

export function createSchoolRequestToJSON(
  createSchoolRequest: CreateSchoolRequest,
): string {
  return JSON.stringify(
    CreateSchoolRequest$outboundSchema.parse(createSchoolRequest),
  );
}

export function createSchoolRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateSchoolRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSchoolRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSchoolRequest' from JSON`,
  );
}
