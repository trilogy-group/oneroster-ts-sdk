/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const UpdateGradingPeriodStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type UpdateGradingPeriodStatus = ClosedEnum<
  typeof UpdateGradingPeriodStatus
>;

export type UpdateGradingPeriodParent = {
  sourcedId: string;
};

export type UpdateGradingPeriodOrg = {
  sourcedId: string;
};

export type UpdateGradingPeriodAcademicSession = {
  sourcedId?: string | undefined;
  status?: UpdateGradingPeriodStatus | undefined;
  metadata?: { [k: string]: any } | undefined;
  title: string;
  startDate: string;
  endDate: string;
  type?: "gradingPeriod" | undefined;
  parent?: UpdateGradingPeriodParent | null | undefined;
  schoolYear: string;
  org: UpdateGradingPeriodOrg;
};

export type UpdateGradingPeriodRequestBody = {
  academicSession: UpdateGradingPeriodAcademicSession;
};

export type UpdateGradingPeriodRequest = {
  /**
   * The sourcedId of the grading period to update
   */
  sourcedId: string;
  requestBody?: UpdateGradingPeriodRequestBody | undefined;
};

/** @internal */
export const UpdateGradingPeriodStatus$inboundSchema: z.ZodNativeEnum<
  typeof UpdateGradingPeriodStatus
> = z.nativeEnum(UpdateGradingPeriodStatus);

/** @internal */
export const UpdateGradingPeriodStatus$outboundSchema: z.ZodNativeEnum<
  typeof UpdateGradingPeriodStatus
> = UpdateGradingPeriodStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateGradingPeriodStatus$ {
  /** @deprecated use `UpdateGradingPeriodStatus$inboundSchema` instead. */
  export const inboundSchema = UpdateGradingPeriodStatus$inboundSchema;
  /** @deprecated use `UpdateGradingPeriodStatus$outboundSchema` instead. */
  export const outboundSchema = UpdateGradingPeriodStatus$outboundSchema;
}

/** @internal */
export const UpdateGradingPeriodParent$inboundSchema: z.ZodType<
  UpdateGradingPeriodParent,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type UpdateGradingPeriodParent$Outbound = {
  sourcedId: string;
};

/** @internal */
export const UpdateGradingPeriodParent$outboundSchema: z.ZodType<
  UpdateGradingPeriodParent$Outbound,
  z.ZodTypeDef,
  UpdateGradingPeriodParent
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateGradingPeriodParent$ {
  /** @deprecated use `UpdateGradingPeriodParent$inboundSchema` instead. */
  export const inboundSchema = UpdateGradingPeriodParent$inboundSchema;
  /** @deprecated use `UpdateGradingPeriodParent$outboundSchema` instead. */
  export const outboundSchema = UpdateGradingPeriodParent$outboundSchema;
  /** @deprecated use `UpdateGradingPeriodParent$Outbound` instead. */
  export type Outbound = UpdateGradingPeriodParent$Outbound;
}

export function updateGradingPeriodParentToJSON(
  updateGradingPeriodParent: UpdateGradingPeriodParent,
): string {
  return JSON.stringify(
    UpdateGradingPeriodParent$outboundSchema.parse(updateGradingPeriodParent),
  );
}

export function updateGradingPeriodParentFromJSON(
  jsonString: string,
): SafeParseResult<UpdateGradingPeriodParent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateGradingPeriodParent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateGradingPeriodParent' from JSON`,
  );
}

/** @internal */
export const UpdateGradingPeriodOrg$inboundSchema: z.ZodType<
  UpdateGradingPeriodOrg,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type UpdateGradingPeriodOrg$Outbound = {
  sourcedId: string;
};

/** @internal */
export const UpdateGradingPeriodOrg$outboundSchema: z.ZodType<
  UpdateGradingPeriodOrg$Outbound,
  z.ZodTypeDef,
  UpdateGradingPeriodOrg
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateGradingPeriodOrg$ {
  /** @deprecated use `UpdateGradingPeriodOrg$inboundSchema` instead. */
  export const inboundSchema = UpdateGradingPeriodOrg$inboundSchema;
  /** @deprecated use `UpdateGradingPeriodOrg$outboundSchema` instead. */
  export const outboundSchema = UpdateGradingPeriodOrg$outboundSchema;
  /** @deprecated use `UpdateGradingPeriodOrg$Outbound` instead. */
  export type Outbound = UpdateGradingPeriodOrg$Outbound;
}

export function updateGradingPeriodOrgToJSON(
  updateGradingPeriodOrg: UpdateGradingPeriodOrg,
): string {
  return JSON.stringify(
    UpdateGradingPeriodOrg$outboundSchema.parse(updateGradingPeriodOrg),
  );
}

export function updateGradingPeriodOrgFromJSON(
  jsonString: string,
): SafeParseResult<UpdateGradingPeriodOrg, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateGradingPeriodOrg$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateGradingPeriodOrg' from JSON`,
  );
}

/** @internal */
export const UpdateGradingPeriodAcademicSession$inboundSchema: z.ZodType<
  UpdateGradingPeriodAcademicSession,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string().optional(),
  status: UpdateGradingPeriodStatus$inboundSchema.default("active"),
  metadata: z.record(z.any()).optional(),
  title: z.string(),
  startDate: z.string(),
  endDate: z.string(),
  type: z.literal("gradingPeriod").default("gradingPeriod").optional(),
  parent: z.nullable(z.lazy(() => UpdateGradingPeriodParent$inboundSchema))
    .optional(),
  schoolYear: z.string(),
  org: z.lazy(() => UpdateGradingPeriodOrg$inboundSchema),
});

/** @internal */
export type UpdateGradingPeriodAcademicSession$Outbound = {
  sourcedId?: string | undefined;
  status: string;
  metadata?: { [k: string]: any } | undefined;
  title: string;
  startDate: string;
  endDate: string;
  type: "gradingPeriod";
  parent?: UpdateGradingPeriodParent$Outbound | null | undefined;
  schoolYear: string;
  org: UpdateGradingPeriodOrg$Outbound;
};

/** @internal */
export const UpdateGradingPeriodAcademicSession$outboundSchema: z.ZodType<
  UpdateGradingPeriodAcademicSession$Outbound,
  z.ZodTypeDef,
  UpdateGradingPeriodAcademicSession
> = z.object({
  sourcedId: z.string().optional(),
  status: UpdateGradingPeriodStatus$outboundSchema.default("active"),
  metadata: z.record(z.any()).optional(),
  title: z.string(),
  startDate: z.string(),
  endDate: z.string(),
  type: z.literal("gradingPeriod").default("gradingPeriod" as const),
  parent: z.nullable(z.lazy(() => UpdateGradingPeriodParent$outboundSchema))
    .optional(),
  schoolYear: z.string(),
  org: z.lazy(() => UpdateGradingPeriodOrg$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateGradingPeriodAcademicSession$ {
  /** @deprecated use `UpdateGradingPeriodAcademicSession$inboundSchema` instead. */
  export const inboundSchema = UpdateGradingPeriodAcademicSession$inboundSchema;
  /** @deprecated use `UpdateGradingPeriodAcademicSession$outboundSchema` instead. */
  export const outboundSchema =
    UpdateGradingPeriodAcademicSession$outboundSchema;
  /** @deprecated use `UpdateGradingPeriodAcademicSession$Outbound` instead. */
  export type Outbound = UpdateGradingPeriodAcademicSession$Outbound;
}

export function updateGradingPeriodAcademicSessionToJSON(
  updateGradingPeriodAcademicSession: UpdateGradingPeriodAcademicSession,
): string {
  return JSON.stringify(
    UpdateGradingPeriodAcademicSession$outboundSchema.parse(
      updateGradingPeriodAcademicSession,
    ),
  );
}

export function updateGradingPeriodAcademicSessionFromJSON(
  jsonString: string,
): SafeParseResult<UpdateGradingPeriodAcademicSession, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateGradingPeriodAcademicSession$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateGradingPeriodAcademicSession' from JSON`,
  );
}

/** @internal */
export const UpdateGradingPeriodRequestBody$inboundSchema: z.ZodType<
  UpdateGradingPeriodRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  academicSession: z.lazy(() =>
    UpdateGradingPeriodAcademicSession$inboundSchema
  ),
});

/** @internal */
export type UpdateGradingPeriodRequestBody$Outbound = {
  academicSession: UpdateGradingPeriodAcademicSession$Outbound;
};

/** @internal */
export const UpdateGradingPeriodRequestBody$outboundSchema: z.ZodType<
  UpdateGradingPeriodRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateGradingPeriodRequestBody
> = z.object({
  academicSession: z.lazy(() =>
    UpdateGradingPeriodAcademicSession$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateGradingPeriodRequestBody$ {
  /** @deprecated use `UpdateGradingPeriodRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateGradingPeriodRequestBody$inboundSchema;
  /** @deprecated use `UpdateGradingPeriodRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateGradingPeriodRequestBody$outboundSchema;
  /** @deprecated use `UpdateGradingPeriodRequestBody$Outbound` instead. */
  export type Outbound = UpdateGradingPeriodRequestBody$Outbound;
}

export function updateGradingPeriodRequestBodyToJSON(
  updateGradingPeriodRequestBody: UpdateGradingPeriodRequestBody,
): string {
  return JSON.stringify(
    UpdateGradingPeriodRequestBody$outboundSchema.parse(
      updateGradingPeriodRequestBody,
    ),
  );
}

export function updateGradingPeriodRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateGradingPeriodRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateGradingPeriodRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateGradingPeriodRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateGradingPeriodRequest$inboundSchema: z.ZodType<
  UpdateGradingPeriodRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  RequestBody: z.lazy(() => UpdateGradingPeriodRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateGradingPeriodRequest$Outbound = {
  sourcedId: string;
  RequestBody?: UpdateGradingPeriodRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateGradingPeriodRequest$outboundSchema: z.ZodType<
  UpdateGradingPeriodRequest$Outbound,
  z.ZodTypeDef,
  UpdateGradingPeriodRequest
> = z.object({
  sourcedId: z.string(),
  requestBody: z.lazy(() => UpdateGradingPeriodRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateGradingPeriodRequest$ {
  /** @deprecated use `UpdateGradingPeriodRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateGradingPeriodRequest$inboundSchema;
  /** @deprecated use `UpdateGradingPeriodRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateGradingPeriodRequest$outboundSchema;
  /** @deprecated use `UpdateGradingPeriodRequest$Outbound` instead. */
  export type Outbound = UpdateGradingPeriodRequest$Outbound;
}

export function updateGradingPeriodRequestToJSON(
  updateGradingPeriodRequest: UpdateGradingPeriodRequest,
): string {
  return JSON.stringify(
    UpdateGradingPeriodRequest$outboundSchema.parse(updateGradingPeriodRequest),
  );
}

export function updateGradingPeriodRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateGradingPeriodRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateGradingPeriodRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateGradingPeriodRequest' from JSON`,
  );
}
