/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const UpdateSchoolStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type UpdateSchoolStatus = ClosedEnum<typeof UpdateSchoolStatus>;

export type UpdateSchoolParent = {
  sourcedId: string;
};

export type UpdateSchoolOrg = {
  sourcedId?: string | undefined;
  status?: UpdateSchoolStatus | undefined;
  metadata?: { [k: string]: any } | undefined;
  name: string;
  type?: "school" | undefined;
  identifier?: string | undefined;
  parent?: UpdateSchoolParent | null | undefined;
};

export type UpdateSchoolRequestBody = {
  org: UpdateSchoolOrg;
};

export type UpdateSchoolRequest = {
  /**
   * School sourced ID
   */
  sourcedId: string;
  requestBody?: UpdateSchoolRequestBody | undefined;
};

/** @internal */
export const UpdateSchoolStatus$inboundSchema: z.ZodNativeEnum<
  typeof UpdateSchoolStatus
> = z.nativeEnum(UpdateSchoolStatus);

/** @internal */
export const UpdateSchoolStatus$outboundSchema: z.ZodNativeEnum<
  typeof UpdateSchoolStatus
> = UpdateSchoolStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSchoolStatus$ {
  /** @deprecated use `UpdateSchoolStatus$inboundSchema` instead. */
  export const inboundSchema = UpdateSchoolStatus$inboundSchema;
  /** @deprecated use `UpdateSchoolStatus$outboundSchema` instead. */
  export const outboundSchema = UpdateSchoolStatus$outboundSchema;
}

/** @internal */
export const UpdateSchoolParent$inboundSchema: z.ZodType<
  UpdateSchoolParent,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type UpdateSchoolParent$Outbound = {
  sourcedId: string;
};

/** @internal */
export const UpdateSchoolParent$outboundSchema: z.ZodType<
  UpdateSchoolParent$Outbound,
  z.ZodTypeDef,
  UpdateSchoolParent
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSchoolParent$ {
  /** @deprecated use `UpdateSchoolParent$inboundSchema` instead. */
  export const inboundSchema = UpdateSchoolParent$inboundSchema;
  /** @deprecated use `UpdateSchoolParent$outboundSchema` instead. */
  export const outboundSchema = UpdateSchoolParent$outboundSchema;
  /** @deprecated use `UpdateSchoolParent$Outbound` instead. */
  export type Outbound = UpdateSchoolParent$Outbound;
}

export function updateSchoolParentToJSON(
  updateSchoolParent: UpdateSchoolParent,
): string {
  return JSON.stringify(
    UpdateSchoolParent$outboundSchema.parse(updateSchoolParent),
  );
}

export function updateSchoolParentFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSchoolParent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSchoolParent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSchoolParent' from JSON`,
  );
}

/** @internal */
export const UpdateSchoolOrg$inboundSchema: z.ZodType<
  UpdateSchoolOrg,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string().optional(),
  status: UpdateSchoolStatus$inboundSchema.default("active"),
  metadata: z.record(z.any()).optional(),
  name: z.string(),
  type: z.literal("school").default("school").optional(),
  identifier: z.string().optional(),
  parent: z.nullable(z.lazy(() => UpdateSchoolParent$inboundSchema)).optional(),
});

/** @internal */
export type UpdateSchoolOrg$Outbound = {
  sourcedId?: string | undefined;
  status: string;
  metadata?: { [k: string]: any } | undefined;
  name: string;
  type: "school";
  identifier?: string | undefined;
  parent?: UpdateSchoolParent$Outbound | null | undefined;
};

/** @internal */
export const UpdateSchoolOrg$outboundSchema: z.ZodType<
  UpdateSchoolOrg$Outbound,
  z.ZodTypeDef,
  UpdateSchoolOrg
> = z.object({
  sourcedId: z.string().optional(),
  status: UpdateSchoolStatus$outboundSchema.default("active"),
  metadata: z.record(z.any()).optional(),
  name: z.string(),
  type: z.literal("school").default("school" as const),
  identifier: z.string().optional(),
  parent: z.nullable(z.lazy(() => UpdateSchoolParent$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSchoolOrg$ {
  /** @deprecated use `UpdateSchoolOrg$inboundSchema` instead. */
  export const inboundSchema = UpdateSchoolOrg$inboundSchema;
  /** @deprecated use `UpdateSchoolOrg$outboundSchema` instead. */
  export const outboundSchema = UpdateSchoolOrg$outboundSchema;
  /** @deprecated use `UpdateSchoolOrg$Outbound` instead. */
  export type Outbound = UpdateSchoolOrg$Outbound;
}

export function updateSchoolOrgToJSON(
  updateSchoolOrg: UpdateSchoolOrg,
): string {
  return JSON.stringify(UpdateSchoolOrg$outboundSchema.parse(updateSchoolOrg));
}

export function updateSchoolOrgFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSchoolOrg, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSchoolOrg$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSchoolOrg' from JSON`,
  );
}

/** @internal */
export const UpdateSchoolRequestBody$inboundSchema: z.ZodType<
  UpdateSchoolRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  org: z.lazy(() => UpdateSchoolOrg$inboundSchema),
});

/** @internal */
export type UpdateSchoolRequestBody$Outbound = {
  org: UpdateSchoolOrg$Outbound;
};

/** @internal */
export const UpdateSchoolRequestBody$outboundSchema: z.ZodType<
  UpdateSchoolRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateSchoolRequestBody
> = z.object({
  org: z.lazy(() => UpdateSchoolOrg$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSchoolRequestBody$ {
  /** @deprecated use `UpdateSchoolRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateSchoolRequestBody$inboundSchema;
  /** @deprecated use `UpdateSchoolRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateSchoolRequestBody$outboundSchema;
  /** @deprecated use `UpdateSchoolRequestBody$Outbound` instead. */
  export type Outbound = UpdateSchoolRequestBody$Outbound;
}

export function updateSchoolRequestBodyToJSON(
  updateSchoolRequestBody: UpdateSchoolRequestBody,
): string {
  return JSON.stringify(
    UpdateSchoolRequestBody$outboundSchema.parse(updateSchoolRequestBody),
  );
}

export function updateSchoolRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSchoolRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSchoolRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSchoolRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateSchoolRequest$inboundSchema: z.ZodType<
  UpdateSchoolRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  RequestBody: z.lazy(() => UpdateSchoolRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateSchoolRequest$Outbound = {
  sourcedId: string;
  RequestBody?: UpdateSchoolRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateSchoolRequest$outboundSchema: z.ZodType<
  UpdateSchoolRequest$Outbound,
  z.ZodTypeDef,
  UpdateSchoolRequest
> = z.object({
  sourcedId: z.string(),
  requestBody: z.lazy(() => UpdateSchoolRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSchoolRequest$ {
  /** @deprecated use `UpdateSchoolRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSchoolRequest$inboundSchema;
  /** @deprecated use `UpdateSchoolRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateSchoolRequest$outboundSchema;
  /** @deprecated use `UpdateSchoolRequest$Outbound` instead. */
  export type Outbound = UpdateSchoolRequest$Outbound;
}

export function updateSchoolRequestToJSON(
  updateSchoolRequest: UpdateSchoolRequest,
): string {
  return JSON.stringify(
    UpdateSchoolRequest$outboundSchema.parse(updateSchoolRequest),
  );
}

export function updateSchoolRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSchoolRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSchoolRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSchoolRequest' from JSON`,
  );
}
